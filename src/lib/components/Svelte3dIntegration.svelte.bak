<script>
  import * as THREE from 'three';
  import { onMount } from 'svelte';
  import { base } from '$app/paths';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

  let container;
  let error = '';
  let loading = true;
  import { onMount } from 'svelte';
  import { base } from '$app/paths';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

  let container;
  let error = '';
  let loading = true;

  onMount(() => {
    const width = container.clientWidth;
    const height = container.clientHeight;
    
    // Create scene
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87CEEB);

    // Create camera
    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    camera.position.set(0, 5, 10);

    // Create renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(width, height);
    container.appendChild(renderer.domElement);

    // Add ground plane
    const planeGeometry = new THREE.PlaneGeometry(10, 10);
    const planeMaterial = new THREE.MeshBasicMaterial({ color: 0x90EE90 });
    const plane = new THREE.Mesh(planeGeometry, planeMaterial);
    plane.rotation.x = -Math.PI / 2;
    scene.add(plane);

    // Add light
    const light = new THREE.DirectionalLight(0xffffff);
    light.position.set(0, 5, 5);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x404040));

    // Add grid helper
    const gridHelper = new THREE.GridHelper(10, 10);
    scene.add(gridHelper);

    // Add controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;

    // Animation
    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }

    // Handle window resize
    function onWindowResize() {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    }

    window.addEventListener('resize', onWindowResize);

    // Start animation
    animate();

    // Load 3D model
    const loader = new GLTFLoader();
    loader.load(
      `${base}/models/spaceship.glb`,
      (gltf) => {
        scene.add(gltf.scene);
        loading = false;
      },
      undefined,
      (err) => {
        error = err.message;
        loading = false;
      }
    );

    return () => {
      window.removeEventListener('resize', onWindowResize);
      renderer.dispose();
    };
  });
  import { onMount, tick } from 'svelte';
  import { base } from '$app/paths';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

  let container;
  let camera, scene, renderer, controls;
  let spaceship;
  let error = '';
  let loading = true;
  
  onMount(async () => {
    console.log('Svelte3dIntegration mounted');
    await tick(); // Wait for CSS to be applied and container to have a size
    console.log('Container size:', container.clientWidth, container.clientHeight);
    
    try {
      // Test WebGL support with more options
      const canvas = document.createElement('canvas');
      let gl = canvas.getContext('webgl2') || 
               canvas.getContext('webgl') || 
               canvas.getContext('experimental-webgl');
      
      if (!gl) {
        // Try with specific attributes
        const contextAttributes = {
          alpha: false,
          antialias: false,
          preserveDrawingBuffer: false,
          failIfMajorPerformanceCaveat: false,
          powerPreference: 'default'
        };
        
        gl = canvas.getContext('webgl', contextAttributes) ||
             canvas.getContext('experimental-webgl', contextAttributes);
             
        if (!gl) {
          throw new Error('WebGL non supporté. Veuillez vérifier que votre navigateur et votre carte graphique supportent WebGL.');
      
      init();
      animate();

      window.addEventListener('resize', onWindowResize);
    } catch (e) {
      error = e.message;
      console.error('Error initializing 3D viewer:', e);
    }

    return () => {
      window.removeEventListener('resize', onWindowResize);
    };
  });

  function init() {
    // Use container dimensions, not window
    const width = container.clientWidth;
    const height = container.clientHeight;
    console.log('Initializing 3D scene with dimensions:', width, height);

    scene = new THREE.Scene();
    
    // Set a très visible background color (bleu ciel)
    scene.background = new THREE.Color(0x87CEEB);
    
    // Add a fog to make the scene more visible
    scene.fog = new THREE.Fog(0x87CEEB, 1, 100);

    camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    camera.position.set(0, 5, 10);
    camera.lookAt(0, 0, 0);

    // Créer un sol coloré
    const groundGeometry = new THREE.PlaneGeometry(100, 100);
    const groundMaterial = new THREE.MeshStandardMaterial({ 
      color: 0x90EE90,  // Vert clair
      roughness: 0.8,
      metalness: 0.2
    });
    const ground = new THREE.Mesh(groundGeometry, groundMaterial);
    ground.rotation.x = -Math.PI / 2;
    ground.receiveShadow = true;
    scene.add(ground);

    // Add lights with more intensity
    const ambientLight = new THREE.AmbientLight(0xffffff, 1);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 2);
    directionalLight.position.set(5, 5, 5);
    directionalLight.castShadow = true;
    scene.add(directionalLight);

    // Add a grid helper with more visible colors
    const gridHelper = new THREE.GridHelper(20, 20, 0x000000, 0x000000);
    scene.add(gridHelper);

    // Add coordinate axes for reference
    const axesHelper = new THREE.AxesHelper(5);
    scene.add(axesHelper);

    try {
      renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        powerPreference: "default",
        failIfMajorPerformanceCaveat: false
      });
      renderer.setSize(width, height);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      renderer.shadowMap.enabled = true;
      container.appendChild(renderer.domElement);
    } catch (e) {
      error = 'Erreur WebGL: ' + e.message;
      return;
    }

    controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.screenSpacePanning = false;
    controls.minDistance = 1;
    controls.maxDistance = 50;
    controls.maxPolarAngle = Math.PI / 2;

    // Load the 3D model
    console.log('Loading 3D model from:', `${base}/models/spaceship.glb`);
    const loader = new GLTFLoader();
    loading = true;
    
    loader.load(
      `${base}/models/spaceship.glb`,
      function (gltf) {
        console.log('Model loaded successfully');
        spaceship = gltf.scene;
        
        // Make the model cast and receive shadows
        spaceship.traverse((child) => {
          if (child.isMesh) {
            child.castShadow = true;
            child.receiveShadow = true;
          }
        });
        
        // Center and scale the model
        const box = new THREE.Box3().setFromObject(spaceship);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        const scale = 2 / Math.max(size.x, size.y, size.z);
        spaceship.scale.multiplyScalar(scale);
        
        // Position the model slightly above the ground
        spaceship.position.sub(center.multiplyScalar(scale));
        spaceship.position.y = 1;
        
        scene.add(spaceship);
        loading = false;
      },
      function (progress) {
        console.log('Loading progress:', (progress.loaded / progress.total * 100) + '%');
      },
      function (error) {
        console.error('Error loading model:', error);
        error = 'Erreur de chargement du modèle: ' + error.message;
        loading = false;
      }
    );
  }

  function onWindowResize() {
    if (!container || !renderer) return;

    const width = container.clientWidth;
    const height = container.clientHeight;

    camera.aspect = width / height;
    camera.updateProjectionMatrix();

    renderer.setSize(width, height);
  }

  function animate() {
    requestAnimationFrame(animate);

    if (spaceship) {
      spaceship.rotation.y += 0.005;
    }
    
    if (controls) {
      controls.update();
    }
    
    if (renderer && scene && camera) {
      renderer.render(scene, camera);
    }
  }
</script>

<div class="viewer-wrapper">
  <div bind:this={container} class="viewer-container">
    {#if error}
      <div class="error-message">
        {error}
      </div>
    {/if}
    {#if loading}
      <div class="loading-message">
        Chargement du modèle 3D...
      </div>
    {/if}
  </div>
</div>

<style>
  .viewer-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .viewer-container {
    width: 100%;
    height: 80vh;
    border: 1px solid #ccc;
    background-color: #87CEEB;
    position: relative;
  }

  .error-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 0, 0, 0.8);
    color: white;
    padding: 1rem;
    border-radius: 4px;
    text-align: center;
  }

  .loading-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 1rem;
    border-radius: 4px;
    text-align: center;
  }
</style>
